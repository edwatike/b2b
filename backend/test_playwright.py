#!/usr/bin/env python3
import os
import sys
import logging
import asyncio
from playwright.async_api import async_playwright

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("playwright_test")

async def main():
    logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç Playwright")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright...")
    async with async_playwright() as playwright:
        logger.info("‚úÖ Playwright –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä (headless=False –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)...")
        browser = await playwright.chromium.launch(
            headless=False,
            args=[
                "--disable-blink-features=AutomationControlled",
                "--window-size=1920,1080"
            ]
        )
        logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        logger.info("–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞...")
        context = await browser.new_context(
            viewport={"width": 1280, "height": 800},
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        )
        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        logger.info("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        page = await context.new_page()
        logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Google
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Google...")
        await page.goto("https://www.google.ru", wait_until="networkidle")
        logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ Google –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –°–¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.screenshot(path="/tmp/google_start.png")
        logger.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ /tmp/google_start.png")
        
        # –í–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        search_query = "—à–ø—É–Ω—Ç –ª–∞—Ä—Å–µ–Ω–∞"
        logger.info(f"–í–≤–æ–¥–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{search_query}'")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        search_box = await page.query_selector("textarea[name='q']")
        if search_box:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞")
            # –í–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            for char in search_query:
                await page.type("textarea[name='q']", char, delay=100)
            
            # –ù–∞–∂–∏–º–∞–µ–º Enter
            await page.press("textarea[name='q']", "Enter")
            logger.info("‚úÖ –ù–∞–∂–∞–ª–∏ Enter")
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            logger.info("–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            await page.wait_for_load_state("networkidle", timeout=30000)
            logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await page.screenshot(path="/tmp/google_results.png", full_page=True)
            logger.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ /tmp/google_results.png")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
            content = await page.content()
            with open("/tmp/google_results.html", "w", encoding="utf-8") as f:
                f.write(content)
            logger.info(f"‚úÖ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/google_results.html (—Ä–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç)")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info("–ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ HTML...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            selectors = [
                'div.yuRUbf > a',
                '.kCrYT > a',
                'a.l',
                'div.g div.r a',
                'div.tF2Cxc a',
                'div.g div.yuRUbf a',
                'a.cz3goc',
                '.DhN8Cf a',
                '.LC20lb',
                'h3'  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            ]
            
            for selector in selectors:
                elements = await page.query_selector_all(selector)
                logger.info(f"–°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                for i, element in enumerate(elements[:5]):  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    href = await element.get_attribute("href") 
                    text = await element.inner_text()
                    logger.info(f"  üìå –†–µ–∑—É–ª—å—Ç–∞—Ç #{i+1}: href={href}, text={text}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            await asyncio.sleep(3)
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        await browser.close()
        logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    asyncio.run(main()) 