from fastapi import APIRouter, HTTPException
import logging
from typing import Dict, Any, List
import traceback
import asyncio
import json

from app.parser.models import SearchRequest, SearchResponse
from app.parser.parser_service import search_and_save
from app.parser.search_scraperapi import search_scraperapi

router = APIRouter()
logger = logging.getLogger(__name__)

@router.post("/search")
async def search(request: SearchRequest) -> Dict[str, Any]:
    logger.info(f"‚ú® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫: {request.query}")
    try:
        logger.info(f"‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{request.query}'...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        results = await search_and_save(request.query)
        
        logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        for i, result in enumerate(results[:3]):
            logger.info(f"  üìå –†–µ–∑—É–ª—å—Ç–∞—Ç #{i+1}: {json.dumps(result, ensure_ascii=False)}")
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
        total_results = len(results)
        response = {
            "results": results,
            "total": total_results,
            "cached": 0,
            "new": total_results
        }
        
        logger.info(f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return response
        
    except Exception as e:
        error_detail = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        logger.error(error_detail)
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return {
            "results": [],
            "total": 0,
            "cached": 0,
            "new": 0,
            "error": str(e)
        } 